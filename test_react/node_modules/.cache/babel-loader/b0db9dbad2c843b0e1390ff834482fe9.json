{"ast":null,"code":"import validator from 'validator';\n\nclass FormValidator {\n  constructor(validations) {\n    this.validations = validations;\n  }\n\n  validate(state) {\n    let validation = this.valid(); // for each validation rule\n\n    this.validations.forEach(rule => {\n      if (!validation[rule.field].isInvalid) {\n        const field_value = state[rule.field].toString();\n        const args = rule.args || [];\n        const validation_method = typeof rule.method === 'string' ? validator[rule.method] : rule.method;\n\n        if (validation_method(field_value, ...args, state) !== rule.validWhen) {\n          validation[rule.field] = {\n            isInvalid: true,\n            message: rule.message\n          };\n          validation.isValid = false;\n        }\n      }\n    });\n    return validation;\n  }\n\n  valid() {\n    const validation = {};\n    this.validations.map(rule => validation[rule.field] = {\n      isInvalid: false,\n      message: ''\n    });\n    return {\n      isValid: true,\n      ...validation\n    };\n  }\n\n}\n\nexport default FormValidator;","map":{"version":3,"sources":["/var/www/html/JOR/test_react/src/validation/FormValidator.js"],"names":["validator","FormValidator","constructor","validations","validate","state","validation","valid","forEach","rule","field","isInvalid","field_value","toString","args","validation_method","method","validWhen","message","isValid","map"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;;AAEA,MAAMC,aAAN,CAAoB;AAChBC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACrB,SAAKA,WAAL,GAAmBA,WAAnB;AACH;;AACDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,QAAIC,UAAU,GAAG,KAAKC,KAAL,EAAjB,CADY,CAEZ;;AACA,SAAKJ,WAAL,CAAiBK,OAAjB,CAAyBC,IAAI,IAAI;AAC7B,UAAG,CAACH,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,CAAuBC,SAA3B,EAAsC;AAClC,cAAMC,WAAW,GAAGP,KAAK,CAACI,IAAI,CAACC,KAAN,CAAL,CAAkBG,QAAlB,EAApB;AACA,cAAMC,IAAI,GAAGL,IAAI,CAACK,IAAL,IAAa,EAA1B;AACA,cAAMC,iBAAiB,GAAG,OAAON,IAAI,CAACO,MAAZ,KAAuB,QAAvB,GAAkChB,SAAS,CAACS,IAAI,CAACO,MAAN,CAA3C,GAA2DP,IAAI,CAACO,MAA1F;;AACA,YAAGD,iBAAiB,CAACH,WAAD,EAAc,GAAGE,IAAjB,EAAuBT,KAAvB,CAAjB,KAAmDI,IAAI,CAACQ,SAA3D,EAAsE;AAClEX,UAAAA,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,GAAyB;AACrBC,YAAAA,SAAS,EAAE,IADU;AAErBO,YAAAA,OAAO,EAAET,IAAI,CAACS;AAFO,WAAzB;AAIAZ,UAAAA,UAAU,CAACa,OAAX,GAAqB,KAArB;AACH;AACJ;AACJ,KAbD;AAcA,WAAOb,UAAP;AACH;;AACDC,EAAAA,KAAK,GAAG;AACJ,UAAMD,UAAU,GAAG,EAAnB;AACA,SAAKH,WAAL,CAAiBiB,GAAjB,CAAqBX,IAAI,IAAKH,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,GAAyB;AACnDC,MAAAA,SAAS,EAAE,KADwC;AAEnDO,MAAAA,OAAO,EAAE;AAF0C,KAAvD;AAIA,WAAO;AACHC,MAAAA,OAAO,EAAE,IADN;AAEH,SAAGb;AAFA,KAAP;AAIH;;AAjCe;;AAmCpB,eAAeL,aAAf","sourcesContent":["import validator from 'validator';\n\nclass FormValidator {\n    constructor(validations) {\n        this.validations = validations;\n    }\n    validate(state) {\n        let validation = this.valid();\n        // for each validation rule\n        this.validations.forEach(rule => {\n            if(!validation[rule.field].isInvalid) {\n                const field_value = state[rule.field].toString();\n                const args = rule.args || [];\n                const validation_method = typeof rule.method === 'string' ? validator[rule.method] : rule.method\n                if(validation_method(field_value, ...args, state) !== rule.validWhen) {\n                    validation[rule.field] = {\n                        isInvalid: true,\n                        message: rule.message\n                    }\n                    validation.isValid = false;\n                }\n            }\n        });\n        return validation;\n    }\n    valid() {\n        const validation = {}\n        this.validations.map(rule => (validation[rule.field] = {\n            isInvalid: false,\n            message: ''\n        }));\n        return {\n            isValid: true,\n            ...validation\n        };\n    }\n}\nexport default FormValidator;"]},"metadata":{},"sourceType":"module"}